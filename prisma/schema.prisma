generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ProjectViews {
  id        String   @id @default(cuid())
  slug      String   @unique
  views     Int      @default(0)
  updatedAt DateTime @updatedAt
}

model Project {
  id                String   @id @default(cuid())
  title             String
  description       String   // Short description for cards
  overview          String?  // Brief overview section
  fullDescription   String?  // Detailed description with markdown support
  image             String   // Main image
  mobileImage       String?  // Mobile version of main image
  images            String[] // Array of additional images for gallery
  mobileImages      String[] // Array of mobile versions of additional images
  technologies      String[] // Array of technology badges
  link              String   // Live site link
  year              String?  // Project year/timeline
  isVisible         Boolean  @default(true)
  priority          Boolean  @default(false)
  order             Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  legalDocuments    LegalDocument[]
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  date          DateTime
  dueDate       DateTime
  notes         String?
  status        InvoiceStatus @default(UNPAID)
  total         Float
  amountPaid    Float         @default(0)
  paidDate      DateTime?
  paymentMethod String?
  paymentReference String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  lastReminder  DateTime?
  reminderCount Int           @default(0)
  clientId      String?
  Client        Client?       @relation(fields: [clientId], references: [id])
  items         InvoiceItem[]
  legalDocuments LegalDocument[]
}

model InvoiceItem {
  id          String  @id @default(cuid())
  description String
  quantity    Int
  price       Float
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Client {
  id        String    @id @default(cuid())
  name      String
  email     String
  emails    String[]  // Changed from single email to array of emails
  address   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  invoices  Invoice[]
  legalDocuments LegalDocument[]
}

model Inquiry {
  id                       String        @id @default(cuid())
  
  // Contact Information
  name                     String
  email                    String
  company                  String?
  phone                    String?
  
  // Project Information
  projectType              String        // personal, business, ecommerce, saas, enterprise
  businessType             String?       // Type of business they run
  currentChallenge         String?       // Main challenge they're facing
  projectGoal              String        // What success looks like
  targetAudience           String?       // Their ideal customers
  hasExistingWebsite       String?       // no, yes-needs-redesign, yes-needs-updates
  
  // Technical Requirements
  selectedFeatures         String[]      // Array of selected feature keys
  selectedAdditionalServices String[]    // Array of selected additional service keys
  designPreference         String?       // modern-minimal, bold-creative, etc.
  timeline                 String        // rush, normal, flexible
  contentReady             String?       // yes, partially, no-need-help
  
  // Estimate
  estimateMin              Int?          // Calculated minimum estimate
  estimateMax              Int?          // Calculated maximum estimate
  breakdown                Json?         // Pricing breakdown details
  
  // Additional Information
  message                  String        // Additional notes/requirements
  hearAboutUs              String?       // How they heard about us
  budget                   String?       // Their budget expectations
  
  // System fields
  status                   InquiryStatus @default(NEW)
  priority                 Boolean       @default(false)
  notes                    String?       // Internal notes
  followUpDate             DateTime?     // When to follow up
  convertedToClientId      String?       // If converted to client
  finalPrice               Int?          // Final quoted price in pence
  quotedAt                 DateTime?     // When the quote was sent
  
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
}

enum InquiryStatus {
  NEW
  CONTACTED
  IN_DISCUSSION
  QUOTED
  ACCEPTED
  REJECTED
  CONVERTED
  ARCHIVED
}

enum InvoiceStatus {
  PAID
  PARTIALLY_PAID
  UNPAID
  OVERDUE
}

model LegalDocument {
  id               String             @id @default(cuid())
  documentNumber   String             @unique
  title            String
  documentType     LegalDocumentType
  content          String             // HTML content of the document
  status           DocumentStatus     @default(DRAFT)
  
  // Relations
  clientId         String?
  Client           Client?            @relation(fields: [clientId], references: [id])
  invoiceId        String?
  Invoice          Invoice?           @relation(fields: [invoiceId], references: [id])
  projectId        String?
  Project          Project?           @relation(fields: [projectId], references: [id])
  
  // Metadata
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  sentAt           DateTime?
  acknowledgedAt   DateTime?
  
  // Legal specific fields
  signatureRequired Boolean           @default(false)
  clientSignature  String?            // Base64 encoded signature image
  expiresAt        DateTime?
  legalBasis       String?            // Legal basis for the document
  jurisdiction     String?            // UK, England & Wales, etc.
}

enum LegalDocumentType {
  SERVICE_AGREEMENT
  TERMS_CONDITIONS
  DEBT_COLLECTION_LETTER
  FORMAL_DEMAND
  COURT_NOTICE
  PROJECT_CONTRACT
  NDA
  WORK_ORDER
}

enum DocumentStatus {
  DRAFT
  SENT
  ACKNOWLEDGED
  EXPIRED
  VOIDED
}
